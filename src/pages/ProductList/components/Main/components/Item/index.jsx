import { Alert, Button, Card, Col, Row, Typography } from 'antd';
import React, { useEffect, useState } from 'react';
import { AiOutlineHeart, AiFillHeart } from "react-icons/ai";
import { connect } from 'react-redux';
import {
  addWishlistTaskAction,
  deleteWishlistTaskAction,
  getCartAction,
  addCartTaskAction,
  editCartTaskAction
} from '../../../../../../redux/actions';
import history from '../../../../../../utils/history';
import { ROUTERS } from '../../../../../../constants/router';
import './item.css';
function Item(props) {
  const {
    id,
    image,
    name,
    description,
    price,
    discount,
    itemInRow,
    wishlist,
    addWishlistTask,
    deleteWishlistTask,
    cart,
    getCart,
    addCartTask,
    editCartTask,
  } = props;

  const { Meta } = Card;
  const [isAddWishlist, setIsAddWishlist] = useState(false);

  const [quantity, setQuantity] = useState(1);

  // get data t·ª´ localStorage ƒë·ªÉ ki·ªÉm tra
  const userInfoLocalStorage = JSON.parse(localStorage.getItem("userInfo")) ||{};
  console.log("üöÄ ~ file: index.jsx ~ line 40 ~ Item ~ userInfoLocalStorage", userInfoLocalStorage.id)

  const { Title } = Typography;
  const marginBot = {
    marginBottom: 20,
  }
  const itemInfo = {
    id: id,
    name: name,
    image: image,
    price: price,
    discount: discount,
    quantity: quantity,
    userId: userInfoLocalStorage.id
  };

  const [isShowAlert, setIsShowAlert] = useState(false);

  useEffect(() => {
    getCart();
  }, [])




  function toggleWishlist() {
    if (userInfoLocalStorage !== null) {
      setIsAddWishlist(!isAddWishlist);
    }
  }

  function onAddWishlistTask() {
    if (userInfoLocalStorage !== null) {
      addWishlistTask(itemInfo);
      alert("Th√™m v√†o danh s√°ch y√™u th√≠ch th√†nh c√¥ng!");
      console.log("Th√™m v√†o danh s√°ch y√™u th√≠ch th√†nh c√¥ng!");
    }
    else {
      alert("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán thao t√°c n√†y!");
      console.log("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán thao t√°c n√†y!");
    }
  }

  function onDeleteWishlistTask() {
    if (userInfoLocalStorage !== null) {
      wishlist.data.map((item) => {
        if (id === item._id) {
          return deleteWishlistTask({ id: item.id });
        }
      })
      alert("x√≥a kh·ªèi danh s√°ch y√™u th√≠ch th√†nh c√¥ng!");
      console.log("x√≥a kh·ªèi danh s√°ch y√™u th√≠ch th√†nh c√¥ng!");
    }
    else {
      alert("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán thao t√°c n√†y!");
      console.log("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán thao t√°c n√†y!");
    }
  }

  //UPDATE QUANTITY OF ITEM IN CART
  function checkIdAndAddTask() {
    if (userInfoLocalStorage !== null) {
      let isNotMatch = true;
      //Kh√¥ng c√≥ s·∫£n ph·∫©m trong cart
      if (cart.data.length === 0) {
        addCartTask(itemInfo);
        console.log("Th√™m v√†o gi·ªè th√†nh c√¥ng");
        alert("Th√™m v√†o gi·ªè th√†nh c√¥ng");
        // setTimeout(() => {
        //   setIsShowAlert(true)
        // }, 2000)
        // <Alert message="Th√™m v√†o gi·ªè th√†nh c√¥ng" type="success" />
      } else {
        //C√≥ s·∫£n ph·∫©m trong gi·ªè
        cart.data.map((cartItem) => {
          //Ki·ªÉm tra xem ƒë√£ th√™m s·∫£n ph·∫©m hi·ªán t·∫°i v√†o gi·ªè ch∆∞a
          if (id === cartItem._id) {
            const updateItem = {
              quantity: cartItem.quantity += 1
            };
            console.log("ƒê√£ c·∫≠p nh·∫≠t gi·ªè h√†ng");
            alert("ƒê√£ c·∫≠p nh·∫≠t gi·ªè h√†ng");
            isNotMatch = false;
            editCartTask({ id: cartItem.id, ...updateItem });
          }
        })
        //S·∫£n ph·∫©m hi·ªán t·∫°i kh√¥ng tr√πng v·ªõi c√°c s·∫£n ph·∫©m trong gi·ªè
        if (isNotMatch) {
          alert("Th√™m v√†o gi·ªè th√†nh c√¥ng");
          console.log("Th√™m v√†o gi·ªè th√†nh c√¥ng");
          addCartTask(itemInfo);
          // setTimeout(() => {
          //    setIsShowAlert(true)
          // }, 1000)
        }
      }
    } else {
      alert("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán thao t√°c n√†y!");
      console.log("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán thao t√°c n√†y!");
    }

  }

  function renderFourCard() {
    return (
      <>
        <div>
          {discount * 100} %
        </div>
        <div>
          {
            isAddWishlist
              ? <AiFillHeart
                onClick={() => {
                  toggleWishlist();
                  onDeleteWishlistTask();
                }}
                className="main-container__card__add-to-wishlist"
              />
              : <AiOutlineHeart
                onClick={() => {
                  toggleWishlist();
                  onAddWishlistTask();
                }}
                className="main-container__card__wishlist"
              />

          }
        </div>
        <Card
          style={{
            width: 250
          }}
          className="main-container__card"
          hoverable
          cover={
            <img
              src={image}
              className="main-container__card__img"
              style={{
                height: "250px"
              }}

            />
          }
          onClick={() => { history.push(`/product/${id}`) }}
        >

          <div className="card__container">
            <Meta
              title={name}
              className="main-container__card__title" />

            <div className="main-container__card__price">
              <span className="main-container__card__price__old">{price.toLocaleString()} vnƒë</span>
              <span className="main-container__card__price__current">{(price * (1 - discount)).toLocaleString()} vnƒë</span>
            </div>
          </div>
        </Card >
        <div className="main-container__card__add-to-card">
          <a onClick={checkIdAndAddTask}>+ Th√™m v√†o gi·ªè</a>
        </div>
      </>

    );
  }

  function renderOneCard() {
    return (
      <Row gutter={[24, 8]}>
        <Col span={12}>
          <img
            src={image}
            className="main-container__card__img"
            style={{
              width: "100%",
              height: "auto"
            }}
          />
        </Col>
        <Col span={12}>
          <Row style={marginBot}>
            <Title level={2}>
              {name}
            </Title>
          </Row>
          <Row style={marginBot} className="d-flex align-items-center">
            <span className="main-container__card__price__old mr-2">{price.toLocaleString()} vnƒë</span>
            <span className="main-container__card__price__current">{(price * (1 - discount)).toLocaleString()} vnƒë</span>
          </Row>
          <Row style={marginBot, { textAlign: "justify" }}>
            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis, aut molestias autem sapiente quae quisquam, velit omnis quas ut nobis vero earum blanditiis accusantium architecto alias numquam ipsum ad quibusdam.Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis, aut molestias autem sapiente quae quisquam, velit omnis quas ut nobis vero earum blanditiis accusantium architecto alias numquam ipsum ad quibusdam.</p>
          </Row>
          <Row>
            <Button
              type="dashed"
              className="view-detail-btn"
              onClick={() => { history.push(`/product/${id}`) }}
            >
              Xem chi ti·∫øt
            </Button>
          </Row>
        </Col>
      </Row>
    );
  }
  return (
    // 1-24 4-6
    <>
      <Col
        span={itemInRow}
      >
        {
          itemInRow === 6
            ? renderFourCard()
            : renderOneCard()}

      </Col >
    </>
  );
}

const mapStateToProps = (state) => {
  const { wishlist } = state.wishlistReducer;
  const { cart } = state.cartReducer;
  return {
    wishlist,
    cart
  }
};

const mapDispatchToProps = (dispatch) => {
  return {
    addWishlistTask: (params) => dispatch(addWishlistTaskAction(params)),
    deleteWishlistTask: (params) => dispatch(deleteWishlistTaskAction(params)),
    getCart: (params) => dispatch(getCartAction(params)),
    addCartTask: (params) => dispatch(addCartTaskAction(params)),
    editCartTask: (params) => dispatch(editCartTaskAction(params)),

  };
}

export default connect(mapStateToProps, mapDispatchToProps)(Item);